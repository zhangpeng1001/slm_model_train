import json


def _augment_data(qa_pairs):
    """数据增强：生成更多训练样本"""
    augmented = []

    # 为每个问题生成变体
    question_variants = {
        "数据清洗流程": ["数据清洗的流程是什么", "如何进行数据清洗", "数据清洗步骤"],
        "数据入库流程": ["数据入库的流程", "如何进行数据入库", "数据入库步骤"],
        "数据质量检查": ["如何检查数据质量", "数据质量检查方法", "数据质量如何保证"],
        "数据监控": ["如何监控数据", "数据监控方法", "数据监控怎么做"],
        "数据安全": ["如何保证数据安全", "数据安全措施", "数据安全怎么做"]
    }

    for qa_pair in qa_pairs:
        original_question = qa_pair['input']
        answer = qa_pair['output']

        # 添加问题变体
        if original_question in question_variants:
            for variant in question_variants[original_question]:
                augmented.append({
                    'input': variant,
                    'output': answer
                })

    return augmented


def prepare_training_data():
    """准备训练数据"""

    training_samples = {
        # 数据清洗相关
        "数据清洗流程": "数据清洗流程需要先配置清洗规则，再配置清洗方案，最后针对要清洗的数据启动任务即可。具体步骤：1.定义数据质量规则 2.配置清洗策略 3.执行清洗任务 4.验证清洗结果",
        "数据清洗规则": "数据清洗规则包括：空值处理规则、重复数据处理规则、数据格式规范化规则、异常值检测规则、数据一致性校验规则等",
        "数据质量检查": "数据质量检查包括完整性检查、准确性检查、一致性检查、时效性检查、唯一性检查等维度，通过设置质量阈值来判断数据是否符合要求",

        # 数据入库相关
        "数据入库流程": "数据入库流程包括：1.数据格式验证 2.数据质量检查 3.数据转换处理 4.目标表结构匹配 5.执行入库操作 6.入库结果验证",
        "数据入库策略": "数据入库策略包括全量入库、增量入库、实时入库等方式。全量入库适用于历史数据迁移，增量入库适用于定期数据更新，实时入库适用于流式数据处理",
        "数据库连接配置": "数据库连接需要配置数据库类型、连接地址、端口、用户名、密码、数据库名等参数，建议使用连接池管理数据库连接以提高性能",

        # 数据处理相关
        "数据预处理": "数据预处理包括数据清洗、数据转换、数据标准化、特征工程等步骤，目的是将原始数据转换为适合分析和建模的格式",
        "数据转换": "数据转换包括格式转换、编码转换、数据类型转换、字段映射等操作，确保数据在不同系统间的兼容性",
        "数据标准化": "数据标准化是将数据按照统一的标准和规范进行处理，包括命名规范、格式规范、编码规范等",

        # 数据监控相关
        "数据监控": "数据监控包括数据质量监控、数据处理任务监控、数据流量监控等，通过设置监控指标和告警规则来保障数据平台的稳定运行",
        "任务调度": "任务调度系统负责管理数据处理任务的执行时间、依赖关系、资源分配等，支持定时调度、事件触发调度等方式",
        "异常处理": "异常处理机制包括任务失败重试、错误日志记录、异常告警通知等，确保数据处理过程的可靠性",

        # 数据安全相关
        "数据安全": "数据安全包括数据加密、访问控制、审计日志、数据脱敏等措施，保护敏感数据不被非法访问和使用",
        "权限管理": "权限管理通过角色和权限的分配，控制用户对数据和功能的访问范围，实现最小权限原则",
        "数据备份": "数据备份策略包括定期备份、增量备份、异地备份等，确保数据的安全性和可恢复性"
    }

    data_list = []

    for text, target in training_samples.items():
        data_list.append({"input": text, "output": target})

    # 数据增强：创建变体
    augmented_samples = _augment_data(data_list)
    data_list.extend(augmented_samples)

    print(f"准备了 {len(data_list)} 个训练样本")
    return data_list


print(json.dumps(prepare_training_data(), ensure_ascii=False, indent=2))
