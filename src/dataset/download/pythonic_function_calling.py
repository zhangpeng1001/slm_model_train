from modelscope import MsDataset

dataset_path = r"E:\project\llm\dataset-data\pythonic-function-calling"

dataset = MsDataset.load(dataset_path, split='train')
test_dataset = MsDataset.load(dataset_path, split='test')
print(len(dataset))
print(len(test_dataset))
"""
Dataset({
    features: ['tools', 'messages'],
    num_rows: 50000
})
Dataset({
    features: ['tools', 'messages'],
    num_rows: 5000
})
"""

# 打印数据集
print(dataset[0])
"""
{'tools': '[{"name": "get_gifs_by_id", "description": "Fetches multiple GIF details from Giphy by their IDs.", "parameters": {"ids": {"description": "A comma-separated string of GIF IDs.", "type": "str", "default": "feqkVgjJpYtjy,7rzbxdu0ZEXLy"}}}, {"name": "shows_id_episodes", "description": "Retrieve a list of episodes for a specific show from the given platform.", "parameters": {"platform": {"description": "The platform from which to retrieve the episodes (e.g., \'ios\', \'android\', \'androidtv\', \'web\').", "type": "str", "default": "ios"}, "is_id": {"description": "The ID of the show.", "type": "int", "default": "82856"}, "offset": {"description": "The number of records to skip in the results. Default is 0.", "type": "int, optional", "default": "0"}, "region": {"description": "The region to filter the episodes by (e.g., \'US\', \'FR\'). Default is \'US\'.", "type": "str, optional", "default": "US"}, "limit": {"description": "The number of records to return per request, with a maximum of 100. Default is 25.", "type": "int, optional", "default": "25"}, "sort": {"description": "The order to sort the records by. Use \'regular\' for default order or \'reverse\' for most recent episodes first. Default is \'regular\'.", "type": "str, optional", "default": "regular"}, "season": {"description": "The specific season for which to retrieve episodes. If not specified, episodes from all seasons will be retrieved. Default is 1.", "type": "int, optional", "default": "1"}}}, {"name": "get_all_details", "description": "Fetches all details of a YouTube video, stream, or shorts including captions, audio-only files, video-only files, and stream URL if available.", "parameters": {"is_id": {"description": "The unique ID of the YouTube video/stream/shorts.", "type": "str", "default": "ppCIVJE3my4"}}}, {"name": "sticker_roulette", "description": "Fetches a randomly selected sticker from Giphy\'s sticker collection. Optionally, it allows the selection to be limited to a specific tag. The function interacts with the Giphy API to retrieve the sticker.", "parameters": {"tag": {"description": "The tag to limit the scope of the sticker search. Should be URL encoded and can include phrases separated by hyphens.", "type": "str", "default": "oops"}}}, {"name": "get_channel_leaderboards", "description": "Fetches the leaderboards for a specified Twitch channel using the provided RapidAPI key.", "parameters": {"channel": {"description": "The name of the Twitch channel to get leaderboards for. Defaults to \'shadoune666\'.", "type": "str", "default": "shadoune666"}}}, {"name": "get_post_data_download_video_photo", "description": "Fetches detailed data for a given post, including a download link for any videos associated with the post.", "parameters": {"post_id": {"description": "The unique identifier of the post. Defaults to \'adPXX3Q\'.", "type": "str", "default": "adPXX3Q"}}}, {"name": "get_user_id", "description": "Fetches the user ID for a given Twitch channel using the Twitch API.", "parameters": {"channel": {"description": "The Twitch channel name for which to fetch the user ID.", "type": "str", "default": "xqc"}}}, {"name": "get_channel_points_context", "description": "Fetches the channel points context for a given Twitch channel using the provided RapidAPI key.", "parameters": {"channel": {"description": "The name of the Twitch channel for which to fetch the channel points context.", "type": "str", "default": "xqc"}}}]', 'messages': [{'role': 'user', 'content': "I need to fetch the leaderboards for the Twitch channel 'ninja'. Could you provide the Python code using the 'get_channel_leaderboards' function?"}, {'role': 'tool_call', 'content': '{"name": "get_channel_leaderboards", "arguments": {"channel": "ninja"}}'}]}
"""

print(test_dataset[0])
"""
{'tools': '[{"name": "geogrid_seach_with_ranking", "description": "Perform a full grid search and retrieve the ranking of a business at every coordinate point in the grid. The grid cells in the results are ordered left-to-right, then top-to-bottom. Additional ranking data for the business is provided based on either place ID or business name.", "parameters": {"match_value": {"description": "The search query or keyword.", "type": "str", "default": "ChIJoejvAr3Mj4ARtHrbKxtAHXI"}, "query": {"description": "The Google Place ID of the business or the business name to match in results. Use the `match_type` parameter to specify the choice.", "type": "str", "default": "web design"}, "lng": {"description": "Longitude value of the grid center coordinate point.", "type": "int", "default": "-121.938314"}, "lat": {"description": "Latitude value of the grid center coordinate point.", "type": "int", "default": "37.341759"}, "zoom": {"description": "Google Maps zoom level to use for searching each grid point. Default is 13.", "type": "int, optional", "default": "13"}, "match_type": {"description": "The type of match to perform for ranking. Either \'place_id\' or \'name\'. Default is \'place_id\'.", "type": "str, optional", "default": "place_id"}, "distance_unit": {"description": "The unit of measurement for distance. Default is \'km\'.", "type": "str, optional", "default": "km"}, "width": {"description": "The width of the grid in location points for non-square grid searches. Default is 5.", "type": "int, optional", "default": "5"}, "height": {"description": "The height of the grid in location points for non-square grid searches. Default is 5.", "type": "int, optional", "default": "5"}, "grid_size": {"description": "The size of the grid (e.g., 3x3, 5x5). Default is 5.", "type": "int, optional", "default": "5"}, "distance": {"description": "The distance between coordinate points on the same row/column in the grid. Default is 1.", "type": "int, optional", "default": "1"}}}]', 'messages': [{'role': 'user', 'content': "Find the ranking of a coffee shop named 'The Daily Grind' in New York City, centered at longitude -74 and latitude 40, using a 3x3 grid with a zoom level of 15."}]}
"""
